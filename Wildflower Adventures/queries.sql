--  Hotels in Jaipur
SELECT * FROM ACCOMMODATION WHERE (CITY='Jaipur');

--  Room Types of hotels in Jaipur
SELECT Accommodation_Name,ROOM_TYPE.* FROM (ACCOMMODATION NATURAL JOIN ROOM_TYPE)
WHERE (CITY='Jaipur');

--  Prices of Particular type of Rooms in Jaipur
SELECT Accommodation_Name,Room_Type_Name,ACCOMMODATION_FARES.* FROM (ACCOMMODATION NATURAL
JOIN ROOM_TYPE NATURAL JOIN ACCOMMODATION_FARES)
WHERE (CITY='Jaipur');

-- Hotels of Shimla with starting price less than 1000
SELECT * FROM ACCOMMODATION
WHERE CITY='Shimla' AND STARTING_PRICE<1000;

--  Transportation Facilities available between Ahmedabad and Navsari
SELECT T.TRANSPORTATION_NAME,T.USER_RATING,T.Transportation_Type,R.* FROM TRANSPORTATION AS T
NATURAL JOIN
(SELECT S.TRANSPORTATION_ID, S.STATION_CODE, S.ARRIVAL AS S_ARRIVAL, S.DEPARTURE AS
S_DEPARTURE, S.HALT AS S_HALT,S.DAY_NO AS S_DAY_NO,
D.STATION_CODE, D.ARRIVAL AS D_ARRIVAL, D.DEPARTURE AS D_DEPARTURE , D.HALT AS
D_HALT,D.DAY_NO AS D_DAY_NO FROM
(SELECT ROUTE.* FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE
CITY='Navsari') AS N) AS S
JOIN
(SELECT ROUTE.* FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE
CITY='Ahmedabad ') AS A) AS D ON S.TRANSPORTATION_ID=D.TRANSPORTATION_ID
WHERE S.STOP_NUMBER < D.STOP_NUMBER) AS R;

--  Classes available in particular type of transportation between Ahmedabad and Navsari
SELECT P.*,TC.CLASS_NAME FROM
(SELECT T.TRANSPORTATION_NAME,T.USER_RATING,R.* FROM TRANSPORTATION AS T
NATURAL JOIN
(SELECT S.TRANSPORTATION_ID, S.STATION_CODE, S.ARRIVAL AS S_ARRIVAL, S.DEPARTURE AS
S_DEPARTURE, S.HALT AS S_HALT,S.DAY_NO AS S_DAY_NO, S.KM_FROM_ORIGIN AS S_KM_FROM_ORIGIN,
D.STATION_CODE, D.ARRIVAL AS D_ARRIVAL, D.DEPARTURE AS D_DEPARTURE , D.HALT AS
D_HALT,D.DAY_NO AS D_DAY_NO,D.KM_FROM_ORIGIN AS D_KM_FROM_ORIGIN FROM
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Navsari') AS
N) AS S
JOIN
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Ahmedabad ')
AS A) AS D ON S.TRANSPORTATION_ID=D.TRANSPORTATION_ID
WHERE S.STOP_NUMBER < D.STOP_NUMBER) AS R ) AS P
NATURAL JOIN
(TRANSPORTATION_CLASS NATURAL JOIN CLASSES) AS TC;

--  Fares of Particular class in transportation facilities between Ahmedabad and Navsari
SELECT PP.*,(D_KM_FROM_ORIGIN-S_KM_FROM_ORIGIN)*BASE_PRICE AS
BASE_PRICE,(D_KM_FROM_ORIGIN-S_KM_FROM_ORIGIN)*TAXES AS TAXES,
TF.BREAKFAST,TF.LUNCH,TF.DINNER,TF.ZERO_CANCELLATION FROM
(SELECT P.*,TC.CLASS_NAME FROM
(SELECT T.TRANSPORTATION_NAME,T.USER_RATING,R.* FROM TRANSPORTATION AS T
NATURAL JOIN
(SELECT S.TRANSPORTATION_ID, S.STATION_CODE, S.ARRIVAL AS S_ARRIVAL, S.DEPARTURE AS
S_DEPARTURE, S.HALT AS S_HALT,S.DAY_NO AS S_DAY_NO, S.KM_FROM_ORIGIN AS S_KM_FROM_ORIGIN,
D.STATION_CODE, D.ARRIVAL AS D_ARRIVAL, D.DEPARTURE AS D_DEPARTURE , D.HALT AS
D_HALT,D.DAY_NO AS D_DAY_NO,D.KM_FROM_ORIGIN AS D_KM_FROM_ORIGIN FROM
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Navsari') AS
A) AS S
JOIN
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Ahmedabad ')
AS A) AS D ON S.TRANSPORTATION_ID=D.TRANSPORTATION_ID
WHERE S.STOP_NUMBER < D.STOP_NUMBER) AS R ) AS P
NATURAL JOIN
(TRANSPORTATION_CLASS NATURAL JOIN CLASSES) AS TC) AS PP
NATURAL JOIN
TRANSPORTATION_FARES AS TF ;

-- Accommodation Prices of All Offers
CREATE VIEW PAP AS
SELECT OFFER_ID,PACKAGE_ID, SUM(BASE_PRICES) AS BASE_PRICES, SUM(TAX_AMT) AS TAX_AMT FROM
(SELECT OFFER_ID, PACKAGE_ID, ACCOMMODATION_ID, SUM(BASE_PRICE*DAYS)/2 AS BASE_PRICES,
SUM(TAXES*DAYS)/2 AS TAX_AMT
FROM OFFER_ACCOMMODATION
NATURAL JOIN ACCOMMODATION_FARES
GROUP BY OFFER_ID, PACKAGE_ID,ACCOMMODATION_ID) AS AF GROUP BY OFFER_ID, PACKAGE_ID;
SELECT * FROM PAP;

-- Source Travel Information of All Offers
REATE VIEW RT AS
SELECT OFFER_ID, PACKAGE_ID, R.TRANSPORTATION_ID, CLASS_ID, FROM_STATION,stop_number AS
FROM_stop_no,km_from_origin AS FROM_km
FROM (SELECT OFFER_ID, PACKAGE_ID, TRANSPORTATION_ID, CLASS_ID, FROM_STATION
FROM OFFER_TRANSPORTATION) AS OT JOIN
(SELECT * FROM ROUTE ) AS R
ON (OT.TRANSPORTATION_ID = R.TRANSPORTATION_ID
AND OT.FROM_STATION = R.STATION_CODE);
SELECT * FROM RT;

-- Destination Travel Information of All Offers
CREATE VIEW RF AS
SELECT OFFER_ID, PACKAGE_ID, R.TRANSPORTATION_ID, CLASS_ID, TO_STATION,stop_number AS
TO_stop_no,km_from_origin AS TO_km FROM
(SELECT OFFER_ID, PACKAGE_ID, TRANSPORTATION_ID, CLASS_ID, TO_STATION
FROM OFFER_TRANSPORTATION) AS OTT JOIN
(SELECT * FROM ROUTE ) AS R
ON OTT.TRANSPORTATION_ID = R.TRANSPORTATION_ID
AND OTT.TO_STATION = R.STATION_CODE;
SELECT * FROM RF;

-- Transportation Prices of All Offers
CREATE VIEW PTP AS
(SELECT OFFER_ID, PACKAGE_ID, SUM(BASE_PRICES) AS TRAN_BASE_PRICE, SUM(TAXES_AMT) AS
TRAN_TAXES FROM
(SELECT OFFER_ID, PACKAGE_ID, TRANSPORTATION_ID, CLASS_ID,BASE_PRICE*(RTF.TO_km -
RTF.FROM_km) AS BASE_PRICES,
(TAXES)*(RTF.TO_km - RTF.FROM_km) AS TAXES_AMT FROM
((SELECT * FROM RT
NATURAL JOIN RF) AS RTF
NATURAL JOIN TRANSPORTATION_FARES) AS RTF WHERE TO_STOP_NO>FROM_STOP_NO) AS OTF
GROUP BY OFFER_ID, PACKAGE_ID);
SELECT * FROM PTP;

-- Total Prices of Each Offer
SELECT PAP.OFFER_ID, PAP.PACKAGE_ID, PAP.BASE_PRICES AS TOTAL_ACCM, PTP.TRAN_BASE_PRICE AS
TOTAL_TRAN,
(PAP.TAX_AMT + PTP.TRAN_TAXES) AS TOTAL_TAXES,
PAP.BASE_PRICES + PTP.TRAN_BASE_PRICE + (PAP.TAX_AMT + PTP.TRAN_TAXES) AS TOTAL_PRICE FROM
PAP JOIN PTP ON PAP.OFFER_ID = PTP.OFFER_ID;

-- Details of Sole Accommodation Booking
SELECT CD.*,INVOICE_ID FROM
(SELECT * FROM
(SELECT BOOKING_ID FROM BOOKING
EXCEPT
SELECT BACKEND_BOOKING_ID FROM PACKAGE_BOOKING_DETAILS) AS AB
NATURAL JOIN ACCOMMODATION_BOOKING) AS CD
NATURAL JOIN BOOKING;

--  INVOICE DETAILS OF ONLY ACCOMMODATION BOOKING
CREATE VIEW O_ACCM_B AS
SELECT CD.*,INVOICE_ID FROM
(SELECT * FROM
(SELECT BOOKING_ID FROM BOOKING
EXCEPT
SELECT BACKEND_BOOKING_ID FROM PACKAGE_BOOKING_DETAILS) AS AB
NATURAL JOIN ACCOMMODATION_BOOKING) AS CD
NATURAL JOIN BOOKING
;
--
SELECT * FROM O_ACCM_B ;

-- ONLY ACCOMMODATION BOOKING PRICE DETAILS
SELECT * FROM
(SELECT * FROM O_ACCM_B
NATURAL JOIN ACCOMMODATION_FARES) AS AF
JOIN ACCOMMODATION_ADD_ON AS AD ON (AF.BOOKING_ID=AD.BOOKING_ID);

--  Price distribution for Accommodation
SELECT *,(FF.TOTAL_AMT+ FF.TAXES) AS GRAND_TOTAL FROM
(SELECT F.*,(F.Mattresses+F.BASE_PRICE+F.BREAKFAST + F.LUNCH_OR_DINNER + F.DINNER +
F.ZERO_CANCELLATION) AS TOTAL_AMT FROM
(SELECT INVOICE_ID,AF.BASE_PRICE,
(AF.BREAKFAST*AD.BREAKFAST)AS BREAKFAST,
(AF.LUNCH_OR_DINNER*AD.LUNCH_OR_DINNER) AS LUNCH_OR_DINNER,
(AF.LUNCH_AND_DINNER*AD.DINNER) AS DINNER,
(AF.ZERO_CANCELLATION*AD.ZERO_CANCELLATION) AS ZERO_CANCELLATION,
(AF.Mattresses*AD.No_Of_Mattresses) AS Mattresses,
AF.TAXES FROM
(SELECT * FROM O_ACCM_B
NATURAL JOIN ACCOMMODATION_FARES) AS AF
JOIN ACCOMMODATION_ADD_ON AS AD ON (AF.BOOKING_ID=AD.BOOKING_ID) ) AS F) AS FF;

-- ONLY TRANSPORTATION BOOKING PRICE DETAILS
SELECT * FROM
(SELECT BOOKING_ID FROM BOOKING
EXCEPT
SELECT BACKEND_BOOKING_ID FROM PACKAGE_BOOKING_DETAILS) AS AB
NATURAL JOIN TRANSPORTATION_BOOKING;

--  Transportation Details with Amenities
CREATE VIEW O_TRANS_B AS
SELECT CD.*,INVOICE_ID FROM
(SELECT * FROM
(SELECT BOOKING_ID FROM BOOKING
EXCEPT
SELECT BACKEND_BOOKING_ID FROM PACKAGE_BOOKING_DETAILS) AS AB
NATURAL JOIN TRANSPORTATION_BOOKING) AS CD
NATURAL JOIN BOOKING
;
SELECT * FROM O_TRANS_B ;

--  Price distribution for Transportation
CREATE VIEW RFB AS
SELECT BOOKING_ID,R.TRANSPORTATION_ID,CLASS_ID,FROM_STATION,INVOICE_ID,stop_number AS
FROM_stop_no,km_from_origin AS FROM_km
FROM (SELECT BOOKING_ID,TRANSPORTATION_ID,CLASS_ID,FROM_STATION,INVOICE_ID FROM O_TRANS_B)
AS OTBF
JOIN
(SELECT * FROM ROUTE) AS R
ON (OTBF.TRANSPORTATION_ID = R.TRANSPORTATION_ID
AND OTBF.FROM_STATION = R.STATION_CODE);
--SELECT * FROM RFB;
CREATE VIEW RTB AS
SELECT BOOKING_ID,R.TRANSPORTATION_ID,CLASS_ID,TO_STATION,INVOICE_ID,stop_number AS
TO_stop_no,km_from_origin AS TO_km
FROM (SELECT BOOKING_ID,TRANSPORTATION_ID,CLASS_ID,TO_STATION,INVOICE_ID FROM O_TRANS_B) AS
OTBT
JOIN
(SELECT * FROM ROUTE) AS R
ON (OTBT.TRANSPORTATION_ID = R.TRANSPORTATION_ID
AND OTBT.TO_STATION = R.STATION_CODE);
--SELECT * FROM RTB;
SELECT *,(FF.TOTAL_AMT+ FF.TAXES) AS GRAND_TOTAL FROM
(SELECT F.*,(F.BASE_PRICE+F.BREAKFAST + F.LUNCH + F.DINNER + F.ZERO_CANCELLATION) AS
TOTAL_AMT FROM
(SELECT INVOICE_ID,((to_km-from_km)*PRTFB.BASE_PRICE) as
BASE_PRICE,(PRTFB.BREAKFAST*TADD.BREAKFAST)AS BREAKFAST,
(PRTFB.LUNCH*TADD.LUNCH) AS LUNCH,
(PRTFB.DINNER*TADD.DINNER) AS DINNER,
(PRTFB.ZERO_CANCELLATION*TADD.ZERO_CANCELLATION) AS ZERO_CANCELLATION,
((to_km-from_km) * PRTFB.TAXES) AS TAXES FROM
(SELECT * FROM
((SELECT * FROM RTB
NATURAL JOIN RFB)
AS RTFB NATURAL JOIN TRANSPORTATION_FARES)
AS RTFB WHERE TO_stop_no>FROM_stop_no)
AS PRTFB JOIN TRANSPORTATION_ADD_ON AS TADD ON TADD.BOOKING_ID = PRTFB.BOOKING_ID) AS F)AS
FF;

--  Seat Availability in Particular Train between Jaipur and Jodhpur
SELECT TRANSPORTATION_NAME,CLASS_NAME,AVL.* FROM
(SELECT P.*,TC.CLASS_NAME,TC.CLASS_ID FROM
(SELECT T.TRANSPORTATION_NAME,T.USER_RATING,R.* FROM TRANSPORTATION AS T
NATURAL JOIN
(SELECT S.TRANSPORTATION_ID, S.STATION_CODE, S.ARRIVAL AS S_ARRIVAL, S.DEPARTURE AS
S_DEPARTURE, S.HALT AS S_HALT,S.DAY_NO AS S_DAY_NO, S.KM_FROM_ORIGIN AS S_KM_FROM_ORIGIN,
D.STATION_CODE, D.ARRIVAL AS D_ARRIVAL, D.DEPARTURE AS D_DEPARTURE , D.HALT AS
D_HALT,D.DAY_NO AS D_DAY_NO,D.KM_FROM_ORIGIN AS D_KM_FROM_ORIGIN FROM
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Jaipur') AS N)
AS S
JOIN
(SELECT * FROM ROUTE NATURAL JOIN (SELECT * FROM STATION WHERE CITY='Jodhpur') AS
A) AS D ON S.TRANSPORTATION_ID=D.TRANSPORTATION_ID
WHERE S.STOP_NUMBER < D.STOP_NUMBER) AS R ) AS P
NATURAL JOIN
(TRANSPORTATION_CLASS NATURAL JOIN CLASSES) AS TC) AS F
JOIN AVAILABLE_SEATS AS AVL ON (AVL.TRANSPORTATION_ID=F.TRANSPORTATION_ID AND
AVL.CLASS_ID=F.CLASS_ID) WHERE DEPARTURE_TIMESTAMP BETWEEN '2023-05-16 06:00:00' AND
'2023-05-23 06:00:00';

--  Total fares after complete booking
CREATE VIEW O_ACCM_B AS
SELECT CD.*,INVOICE_ID FROM
(SELECT * FROM
(SELECT BOOKING_ID FROM BOOKING
EXCEPT
SELECT BACKEND_BOOKING_ID FROM PACKAGE_BOOKING_DETAILS) AS AB
NATURAL JOIN ACCOMMODATION_BOOKING) AS CD
NATURAL JOIN BOOKING
;
SELECT *,(FF.TOTAL+FF.TAXES) AS GRAND_TOTAL FROM
(SELECT INVOICE_ID,(F.BASE_PRICE+F.BREAKFAST + F.LUNCH_OR_DINNER + F.DINNER +
F.ZERO_CANCELLATION) AS TOTAL ,TAXES FROM
(SELECT INVOICE_ID,AF.BASE_PRICE,(AF.BREAKFAST*AD.BREAKFAST)AS
BREAKFAST,(AF.LUNCH_OR_DINNER*AD.LUNCH_OR_DINNER) AS
LUNCH_OR_DINNER,(AF.LUNCH_AND_DINNER*AD.DINNER) AS
DINNER,(AF.ZERO_CANCELLATION*AD.ZERO_CANCELLATION) AS ZERO_CANCELLATION,AF.TAXES FROM
(SELECT * FROM O_ACCM_B
NATURAL JOIN ACCOMMODATION_FARES) AS AF
JOIN ACCOMMODATION_ADD_ON AS AD ON (AF.BOOKING_ID=AD.BOOKING_ID) ) AS F) AS FF;

--  Transaction Count of payments made using UPI
SELECT COUNT(TRANSACTION_ID) FROM TRANSACTION WHERE TRANSACTION_MODE = 'UPI';

-- Number of Cancellations and the amount to be refunded
SELECT COUNT(CANCELLATION_ID), SUM(TOTAL_REFUNDABLE_AMOUNT) FROM CANCELLATION WHERE
REFUND_STATUS = 'IN PROCESS';

--  Rooms available for particular period
ELECT ACCOMMODATION_NAME, ROOM_TYPE_NAME, MIN(AVAILABLE_ROOMS) AS AVAILABLE FROM
AVAILABLE_ROOMS AS AR NATURAL JOIN ROOM_TYPE NATURAL JOIN ACCOMMODATION
WHERE CITY = 'Manali' AND (CHECK_IN_DATE = '2023-05-20' OR CHECK_OUT_DATE = '2023-05-22')
GROUP BY ACCOMMODATION_NAME, ROOM_TYPE_NAME;

-- Displaying Invoice details
SELECT * FROM INVOICE_DETAILS;
